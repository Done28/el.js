// Generated by CoffeeScript 1.10.0
var BasicInput, CrowdControl, EmailInput, ExampleForm, Form, Input, View, doesEmailExist, isEmail, refer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

refer = require('referential');

window.riot = require('riot');

CrowdControl = require('../../src/');

window.Crowdcontrol = CrowdControl;

View = CrowdControl.Views.View;

Form = CrowdControl.Views.Form;

Input = CrowdControl.Views.Input;

isEmail = function(value) {
  var re;
  if (value == null) {
    throw new Error("Enter a valid email");
  }
  value = value.trim().toLowerCase();
  re = /[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;
  if (value.match(re)) {
    return value;
  }
  throw new Error("Enter a valid email");
};

doesEmailExist = function(value) {
  if (value.length === 0) {
    throw new Error("Email cannot be empty");
  }
  return new Promise(function(resolve, reject) {
    return $.get('/email/' + value).then(function(res) {
      return reject(Error("Email already exists"));
    }, function() {
      return resolve(value);
    });
  });
};

BasicInput = (function(superClass) {
  extend(BasicInput, superClass);

  function BasicInput() {
    return BasicInput.__super__.constructor.apply(this, arguments);
  }

  BasicInput.prototype.tag = 'basic-input';

  BasicInput.prototype.html = "<label __for=\"{ label }\">{ label }</label>\n<input id=\"{ input.name }\" name=\"{ input.name }\" type=\"text\" onchange=\"{ change }\" onblur=\"{ change }\" value=\"{ input.ref(input.name) }\" placeholder=\"{ placeholder }\"></input>";

  BasicInput.prototype.getValue = function(event) {
    return $(event.target).val();
  };

  return BasicInput;

})(Input);

BasicInput.register();

EmailInput = (function(superClass) {
  extend(EmailInput, superClass);

  function EmailInput() {
    return EmailInput.__super__.constructor.apply(this, arguments);
  }

  EmailInput.prototype.tag = 'email-input';

  return EmailInput;

})(BasicInput);

EmailInput.register();

ExampleForm = (function(superClass) {
  extend(ExampleForm, superClass);

  function ExampleForm() {
    return ExampleForm.__super__.constructor.apply(this, arguments);
  }

  ExampleForm.prototype.configs = {
    email: [isEmail, doesEmailExist],
    basic: null,
    'example.nested.structure.1': null
  };

  ExampleForm.prototype.tag = 'example-form';

  ExampleForm.prototype.html = "<form onsubmit=\"{ submit }\">\n  <email-input label=\"Email\" input=\"{ inputs.email }\"></email-input>\n  <basic-input label=\"Basic Input\" input=\"{ inputs.basic }\"></basic-input>\n  <basic-input label=\"Nested Input\" input=\"{ inputs['example.nested.structure.1'] }\"></basic-input>\n  <button type=\"submit\">Submit</button>\n</form>";

  ExampleForm.prototype.init = function() {
    this.data = refer({
      basic: "This is prefilled!",
      example: {
        nested: {
          structure: ["Should not see", "This is also prefilled!"]
        }
      }
    });
    return ExampleForm.__super__.init.apply(this, arguments);
  };

  ExampleForm.prototype._submit = function(event) {
    console.log(this.data());
    return alert('Success!');
  };

  return ExampleForm;

})(Form);

ExampleForm.register();

$(function() {
  return CrowdControl.start();
});

//# sourceMappingURL=form.js.map
