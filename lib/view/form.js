// Generated by CoffeeScript 1.10.0
var Events, FormView, Input, InputCondition, InputConfig, InputView, ValidatorCondition, View, helpers, isArray, isFunction, isNumber, isObject, log, promise, riot, tokenize, traverse, utils,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

isArray = require('is-array');

isFunction = require('is-function');

isNumber = require('is-number');

isObject = require('is-object');

Events = require('../events');

utils = require('../utils');

log = utils.log;

riot = utils.shim.riot;

promise = utils.shim.promise;

View = require('./view');

tokenize = function(str) {
  var dict, j, k, len, ref, token, tokens, v;
  tokens = str.split(' ');
  dict = {};
  for (j = 0, len = tokens.length; j < len; j++) {
    token = tokens[j];
    if (token.indexOf(':') >= 0) {
      ref = token.split(':'), k = ref[0], v = ref[1];
      dict[k] = v;
    } else {
      dict[token] = true;
    }
  }
  return dict;
};

InputConfig = (function() {
  InputConfig.prototype.name = '';

  InputConfig.prototype["default"] = '';

  InputConfig.prototype.placeholder = '';

  InputConfig.prototype.hints = null;

  function InputConfig(name1, _default, placeholder, hints) {
    this.name = name1;
    this["default"] = _default != null ? _default : '';
    this.placeholder = placeholder != null ? placeholder : '';
    if (hints == null) {
      hints = '';
    }
    this.hints = tokenize(hints);
  }

  return InputConfig;

})();

Input = (function() {
  Input.prototype.tag = '';

  Input.prototype.model = {};

  Input.prototype.validator = function() {};

  Input.prototype.obs = null;

  function Input(tag1, model1, validator1) {
    this.tag = tag1;
    this.model = model1;
    this.validator = validator1;
  }

  return Input;

})();

ValidatorCondition = (function() {
  function ValidatorCondition(predicate1, validatorFn1) {
    this.predicate = predicate1;
    this.validatorFn = validatorFn1;
  }

  return ValidatorCondition;

})();

InputCondition = (function() {
  function InputCondition(predicate1, tagName1) {
    this.predicate = predicate1;
    this.tagName = tagName1;
  }

  return InputCondition;

})();

helpers = {
  tagLookup: [],
  validatorLookup: [],
  defaultTagName: 'form-input',
  errorTag: 'form-error',
  registerValidator: function(predicate, validatorFn) {
    if (isFunction(validatorFn)) {
      return this.validatorLookup.push(new ValidatorCondition(predicate, validatorFn));
    }
  },
  registerTag: function(predicate, tagName) {
    return this.tagLookup.push(new InputCondition(predicate, tagName));
  },
  deleteTag: function(tagName) {
    var i, j, len, lookup, ref, results1;
    ref = this.tagLookup;
    results1 = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      lookup = ref[i];
      if (lookup.tagName === tagName) {
        results1.push(this.tagLookup[i] = null);
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  },
  deleteValidator: function(predicate, validatorFn) {
    var i, j, len, lookup, ref, results1;
    ref = this.validatorLookup;
    results1 = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      lookup = ref[i];
      if (lookup.validatorFn === validatorFn) {
        results1.push(this.validatorLookup[i] = null);
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  },
  render: function(inputCfgs) {
    var fn1, i, inputCfg, inputs, j, len, validators;
    inputs = {};
    fn1 = (function(_this) {
      return function(validators, inputCfg) {
        var found, l, len1, len2, lookup, m, model, ref, ref1, tag, validator, validatorFn;
        ref = _this.validatorLookup;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          lookup = ref[l];
          if (lookup.predicate(inputCfg)) {
            validatorFn = lookup.validatorFn;
            (function(validatorFn) {
              return validators.push(function(pair) {
                var model, name, p;
                model = pair[0], name = pair[1];
                p = promise["new"](function(resolve, reject) {
                  return resolve(pair);
                });
                return p.then(function(pair) {
                  return validatorFn.call(inputCfg, pair[0], pair[1]);
                }).then(function(v) {
                  model[name] = v;
                  return promise["new"](function(resolve, reject) {
                    return resolve(pair);
                  });
                });
              });
            })(validatorFn);
          }
        }
        validators.push(function(pair) {
          var model, name;
          model = pair[0], name = pair[1];
          return promise["new"](function(resolve, reject) {
            return resolve(model[name]);
          });
        });
        validator = function(model, name) {
          var len2, m, p;
          p = promise["new"](function(resolve, reject) {
            return resolve([model, name]);
          });
          for (m = 0, len2 = validators.length; m < len2; m++) {
            validatorFn = validators[m];
            p = p.then(validatorFn);
          }
          return p;
        };
        found = false;
        ref1 = _this.tagLookup;
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          lookup = ref1[m];
          if (lookup == null) {
            continue;
          }
          if (lookup.predicate(inputCfg)) {
            tag = lookup.tagName;
            found = true;
            break;
          }
        }
        if (!found) {
          tag = _this.defaultTagName;
        }
        model = {
          name: inputCfg.name,
          value: inputCfg["default"],
          placeholder: inputCfg.placeholder,
          cfg: inputCfg
        };
        return inputs[inputCfg.name] = new Input(tag, model, validator);
      };
    })(this);
    for (i = j = 0, len = inputCfgs.length; j < len; i = ++j) {
      inputCfg = inputCfgs[i];
      if (inputCfg == null) {
        continue;
      }
      validators = [];
      fn1(validators, inputCfg);
    }
    return inputs;
  }
};

Events.Input = {
  Result: 'input-result',
  Get: 'input-get',
  Set: 'input-set',
  Change: 'input-change',
  Error: 'input-error',
  ClearError: 'input-clear-error'
};

InputView = (function(superClass) {
  var obj1;

  extend(InputView, superClass);

  function InputView() {
    return InputView.__super__.constructor.apply(this, arguments);
  }

  InputView.prototype.getValue = function(el) {
    return el.value;
  };

  InputView.prototype.errorHtml = "<div class=\"error-container\" if=\"{ hasError() }\">\n  <div class=\"error-message\">{ error }</div>\n</div>";

  InputView.prototype.init = function() {
    return this.html += this.errorHtml;
  };

  InputView.prototype.events = (
    obj1 = {},
    obj1["" + Events.Input.Set] = function() {
      return this._set.apply(this, arguments);
    },
    obj1["" + Events.Input.Error] = function() {
      return this._error.apply(this, arguments);
    },
    obj1["" + Events.Input.ClearError] = function() {
      return this._clearError.apply(this, arguments);
    },
    obj1
  );

  InputView.prototype._clearError = function(name) {
    if (name === this.model.name) {
      this.clearError();
      return this.update();
    }
  };

  InputView.prototype._error = function(name, message) {
    if (name === this.model.name) {
      this.setError(message);
      return this.update();
    }
  };

  InputView.prototype._set = function(name, value) {
    if (name === this.model.name) {
      this.clearError();
      this.model.value = value;
      return this.update();
    }
  };

  InputView.prototype.change = function(event) {
    var value;
    value = this.getValue(event.target);
    if (value === '' || value !== this.model.value) {
      this.obs.trigger(Events.Input.Change, this.model.name, value);
    }
    return this.model.value = value;
  };

  InputView.prototype.hasError = function() {
    var error;
    error = this.error;
    return (error != null) && (error.length != null) && error.length > 0;
  };

  InputView.prototype.setError = function(message) {
    return this.error = message;
  };

  InputView.prototype.clearError = function() {
    return this.setError(null);
  };

  InputView.prototype.js = function(opts) {
    return this.model = opts.input.model;
  };

  return InputView;

})(View);

riot.tag("control", "", function(opts) {
  var input;
  input = opts.input;
  if (input != null) {
    opts.obs = input.obs;
    return riot.mount(this.root, input.tag, opts);
  }
});

Events.Form = {
  SubmitSuccess: 'form-submit-success',
  SubmitFailed: 'form-submit-failed'
};

FormView = (function(superClass) {
  var obj1;

  extend(FormView, superClass);

  function FormView() {
    return FormView.__super__.constructor.apply(this, arguments);
  }

  FormView.prototype.inputConfigs = null;

  FormView.prototype.events = (
    obj1 = {},
    obj1["" + Events.Input.Get] = function() {
      return this._result.apply(this, arguments);
    },
    obj1["" + Events.Input.Change] = function() {
      return this._change.apply(this, arguments);
    },
    obj1
  );

  FormView.prototype._change = function(name, newValue) {
    var input, lastName, model, ref;
    this.fullyValidated = false;
    ref = this._set(this.model, name, newValue), model = ref[0], lastName = ref[1];
    input = this.inputs[name];
    if (input != null) {
      return input.validator(model, lastName).then((function(_this) {
        return function(value) {
          return _this.obs.trigger(Events.Input.Set, name, value);
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          log("Validation error has occured", err.stack);
          return _this.obs.trigger(Events.Input.Error, name, err.message);
        };
      })(this));
    }
  };

  FormView.prototype._result = function(name) {
    return this.obs.trigger(Events.Input.Result, this._get(this.model, name));
  };

  FormView.prototype._submit = function(event) {};

  FormView.prototype.submit = function(event) {
    var input, lastName, model, name, names, promises, ref, ref1;
    if (event != null) {
      event.preventDefault();
    }
    if (this.fullyValidated) {
      this._submit(event);
      return;
    }
    names = [];
    promises = [];
    ref = this.inputs;
    for (name in ref) {
      input = ref[name];
      names.push(name);
      ref1 = this._find(this.model, name), model = ref1[0], lastName = ref1[1];
      promises.push(input.validator(model, lastName));
    }
    return promise.settle(promises).then((function(_this) {
      return function(results) {
        var i, j, len, rejected, result;
        rejected = false;
        for (i = j = 0, len = results.length; j < len; i = ++j) {
          result = results[i];
          if (result.isRejected()) {
            rejected = true;
            _this.obs.trigger(Events.Input.Error, names[i], result.reason().message);
          }
        }
        if (rejected) {
          _this.obs.trigger(Events.Form.SubmitFailed, _this.model);
          return;
        }
        _this.fullyValidated = true;
        _this.obs.trigger(Events.Form.SubmitSuccess, _this.model);
        return _this._submit(event);
      };
    })(this));
  };

  FormView.prototype._get = function(model, path) {
    var currentObject, j, len, name, names;
    names = path.split('.');
    if (names.length === 1) {
      return model[path];
    }
    currentObject = model;
    for (j = 0, len = names.length; j < len; j++) {
      name = names[j];
      if (currentObject[name] == null) {
        return void 0;
      }
      currentObject = currentObject[name];
    }
    return currentObject[lastName];
  };

  FormView.prototype._set = function(model, path, value) {
    var currentObject, lastName, ref;
    ref = this._find(model, path), currentObject = ref[0], lastName = ref[1];
    currentObject[lastName] = value;
    return [currentObject, lastName];
  };

  FormView.prototype._find = function(model, path) {
    var currentObject, j, lastName, len, name, names;
    names = path.split('.');
    if (names.length === 1) {
      return [model, path];
    }
    lastName = names.pop();
    currentObject = model;
    for (j = 0, len = names.length; j < len; j++) {
      name = names[j];
      if (currentObject[name] != null) {
        currentObject = currentObject[name];
        continue;
      }
      if (isNumber(name)) {
        currentObject[name] = [];
      } else {
        currentObject[name] = {};
      }
      currentObject = currentObject[name];
    }
    return [currentObject, lastName];
  };

  FormView.prototype.js = function() {
    return this.initFormGroup();
  };

  FormView.prototype.initFormGroup = function() {
    var input, inputs, key;
    if (this.inputConfigs != null) {
      if (this.inputs == null) {
        this.inputs = inputs = helpers.render(this.inputConfigs);
      } else {
        inputs = this.inputs;
      }
      for (key in inputs) {
        input = inputs[key];
        input.obs = this.obs;
      }
      this.fullyValidated = false;
      return traverse(this.model, function(key, value) {
        if (inputs[key] != null) {
          return inputs[key].model.value = value;
        }
      });
    }
  };

  return FormView;

})(View);

traverse = function(obj, fn, key) {
  var k, results1, v;
  if (key == null) {
    key = '';
  }
  if (isArray(obj) || isObject(obj)) {
    results1 = [];
    for (k in obj) {
      v = obj[k];
      results1.push(traverse(v, fn, key === '' ? k : (key + '.') + k));
    }
    return results1;
  } else {
    return fn(key, obj);
  }
};

module.exports = {
  helpers: helpers,
  FormView: FormView,
  InputView: InputView,
  Input: Input,
  InputConfig: InputConfig,
  tokenize: tokenize
};

//# sourceMappingURL=form.js.map
