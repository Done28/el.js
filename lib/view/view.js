// Generated by CoffeeScript 1.10.0
var View, extend, isFunction, riot, utils;

extend = require('extend');

isFunction = require('is-function');

utils = require('../utils');

riot = utils.shim.riot;

View = (function() {
  View.register = function() {
    return new this;
  };

  View.prototype.tag = '';

  View.prototype.html = '';

  View.prototype.css = '';

  View.prototype.attrs = '';

  View.prototype.events = null;

  View.prototype.mixins = null;

  View.prototype.model = null;

  View.prototype.js = function() {};

  function View() {
    var parentProto, proto, temp, view;
    proto = Object.getPrototypeOf(this);
    parentProto = proto;
    temp = {};
    while (parentProto !== View.prototype) {
      parentProto = Object.getPrototypeOf(parentProto);
      proto.events = extend({}, parentProto.events || {}, proto.events);
      extend(temp, parentProto || {}, proto);
    }
    extend(proto, temp);
    view = this;
    this.init();
    riot.tag(this.tag, this.html, this.css, this.attrs, function(opts) {
      var fn, handler, k, name, obs, optsP, ref, ref1, v;
      optsP = Object.getPrototypeOf(opts);
      for (k in opts) {
        v = opts[k];
        if ((optsP[k] != null) && (v == null)) {
          opts[k] = optsP[k];
        }
      }
      if (view != null) {
        ref = Object.getPrototypeOf(view);
        for (k in ref) {
          v = ref[k];
          if (isFunction(v)) {
            (function(_this) {
              return (function(v) {
                var oldFn;
                if (_this[k] != null) {
                  oldFn = _this[k];
                  return _this[k] = function() {
                    oldFn.apply(_this, arguments);
                    return v.apply(_this, arguments);
                  };
                } else {
                  return _this[k] = function() {
                    return v.apply(_this, arguments);
                  };
                }
              });
            })(this)(v);
          } else {
            this[k] = v;
          }
        }
      }
      this.model = opts.model || this.model;
      if (this.model == null) {
        this.model = {};
      }
      obs = this.obs = opts.obs;
      if (this.obs == null) {
        obs = this.obs = {};
        utils.shim.observable(obs);
      }
      if (view.events != null) {
        ref1 = view.events;
        fn = (function(_this) {
          return function(name, handler) {
            return obs.on(name, function() {
              return handler.apply(_this, arguments);
            });
          };
        })(this);
        for (name in ref1) {
          handler = ref1[name];
          fn(name, handler);
        }
      }
      if (this.js) {
        return this.js(opts);
      }
    });
  }

  View.prototype.init = function() {};

  return View;

})();

module.exports = View;

//# sourceMappingURL=view.js.map
