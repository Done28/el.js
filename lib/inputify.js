// Generated by CoffeeScript 1.10.0
var Promise, inputify;

Promise = require('broken');

inputify = function(ref, configs) {
  var config, fn, inputs, middleware, name;
  inputs = {};
  fn = function(validations, name, config) {
    var fn1, i, len, middlewareFn, ref1, validate;
    if (!config.middleware) {
      return;
    }
    ref1 = config.middleware;
    fn1 = function(name, middlwareFn) {
      return middlware.push(function(pair) {
        name = pair[0], ref = pair[1];
        return Promise.resolve(pair).then(function(pair) {
          return middlewareFn.call(pair[1][pair[0]], pair[1], pair[0]);
        }).then(function(v) {
          ref[name] = v;
          return pair;
        });
      });
    };
    for (i = 0, len = ref1.length; i < len; i++) {
      middlewareFn = ref1[i];
      fn1(name, middlwareFn);
    }
    middleware.push(function(pair) {
      ref = pair[0], name = pair[1];
      return promise["new"](function(resolve, reject) {
        return resolve(ref.get(name));
      });
    });
    validate = function(name, model) {
      var j, len1, p;
      p = Promise.resolve([name, model]);
      for (j = 0, len1 = middelware.length; j < len1; j++) {
        middlewareFn = middelware[j];
        p = p.then(middlewareFn);
      }
      return p;
    };
    ({
      input: {
        name: name,
        ref: ref,
        config: config,
        validate: validate
      }
    });
    return inputs[name] = input;
  };
  for (name in configs) {
    config = configs[name];
    middleware = [];
    fn(validations, name, config);
  }
  return inputs;
};

module.exports = inputify;

//# sourceMappingURL=inputify.js.map
